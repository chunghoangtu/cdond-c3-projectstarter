version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy AWS Environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            echo "Destroying S3 bucket "
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            echo "Destroying all of EC2 instants "
            aws cloudformation delete-stack --stack-name udapeople-be-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name udapeople-fe-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert the last migration
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/SKskqXNeUCmnkkQ3mH5Esa/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [fe-build]
      - run:
          name: Build FE
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: fe-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [be-build]
      - run:
          name: build BE
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: be-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [fe-build]
      - run:
          name: Run FE unit-test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [be-build]
      - run:
          name: Run BE unit-test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [fe-build]
      - run:
          name: Scan vulnerabilities of FE
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [be-build]
      - run:
          name: Scan vulnerabilities of BE
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Make sure BE infras is existed
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-be-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Make sure FE infras is existed
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-fe-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            cd .circleci/ansible
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
              --filters Name=tag:Name,Values="be-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a7:31:2e:07:a5:16:c5:fd:e3:63:e5:2b:8c:06:be:2f"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/SKskqXNeUCmnkkQ3mH5Esa/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies for FE env and AWS env
          command: |
            yum install -y python3.7
            yum install -y tar gzip
            yum -y install curl
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Get BE url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
                --filters Name=tag:Name,Values="be-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
                --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy FE
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["a7:31:2e:07:a5:16:c5:fd:e3:63:e5:2b:8c:06:be:2f"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --update nodejs npm
      - run:
          name: Deploy BE
          command: |
            cd backend
            npm i
            npm run build

            cd ..
            tar -C backend -czvf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            mv artifact.tar.gz .circleci/ansible/roles/deploy/files

            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  smoke-test:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies like curl, nodejs, npm, or awscli.
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - run :
          name: Retrieve the BE IP address in an earlier job
          command: |
            export BE_IP=$(aws ec2 describe-instances \
                  --filters Name=tag:Name,Values="be-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            echo "Backend IP: ${BE_IP}"
      - run:
          name: Run BE smoke test with given BE IP.
          command: |
            export BE_IP=$(aws ec2 describe-instances \
                  --filters Name=tag:Name,Values="be-${CIRCLE_WORKFLOW_ID:0:7}" Name=instance-state-name,Values=running \
                  --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BE_IP}:3030"
            echo "API URL: ${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Run FE smoke test.
          command: |
            export FE_URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo "FE URL: export FE_${FE_URL}"
            if curl -s ${FE_URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install needed dependencies
          command: |
            yum install -y python3.7
            yum -y install curl
            curl -sL https://rpm.nodesource.com/setup_14.x | bash -
            yum install -y nodejs
      - run:
          name: Get old workflow stack id
          command: |
            export OldWorkflowStack=$(aws cloudformation \
                  list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                  --no-paginate --output text)      
            echo Old Workflow ID: "${OldWorkflowStack:10:7}"
            echo "${OldWorkflowStack:10:7}" > ~/OldWorkflowID.txt
      - run:
          name: Change the origin of CloudFront distribution to the new S3 bucket using a CloudFormation template
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
            echo Current WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - ./OldWorkflowID.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Install needed dependencies
          command: |
            yum install -y tar gzip unzip
      - run:
          name: Decide upon teh condition to remove old stacks/s3 bucket
          command: |
            pwd
            ls
            OldWorkflowID=$(cat ~/OldWorkflowID.txt)            
            echo OldWorkflowID: "${OldWorkflowID}"
            echo Current WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}"  ]]
            then
              echo 'Start Cleaning up'
              echo Cleaning S3 bucket: s3://udapeople-${OldWorkflowID}
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-be-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-fe-${OldWorkflowID}"
              echo 'Clean up done'
            else
              echo 'Cannot clean up'
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
